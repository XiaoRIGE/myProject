<template>
  <view
    class="running-result"
    :style="{ height: screenHeight + 'px' }"
  >
    <map
      v-if="showMap"
      id="maps"
      ref="maps"
      :style="{ height: screenHeight + 'px' }"
      :polyline="covers"
      :polygons="polygons"
      :markers="markers"
      :latitude="latitude"
      :longitude="longitude"
      class="running-map"
    >
    <!-- 返回按钮组件 -->
    <cover-image
      class="nav-bar"
      :style="[{ top: StatusBar + 10 + 'px' }]"
      src="/static/img/back.png"
      @click="back"
    />
    <cover-view
      class="nav-title"
      :style="[{ top: StatusBar + 10 + 'px' }]"
    >
      <text class="nav-title-text">跑步轨迹</text>
    </cover-view>
    <view class="running-record" :style="{height: runningInfo.page !== 'show' ? '340rpx' : '240rpx'}">
      <view class="running-record-top">
              <view class="item">
                  <image class="record-img" src="/static/img/runningResult/running-speed.png">
                  <text class="record-count">{{avePace || '0\'00\'\''}}</text>
                  <text class="record-text">平均配速/km</text>
              </view>
              <view class="item">
                  <image class="record-img" src="/static/img/runningResult/running-time.png">
                  <text class="record-count">{{keepTime}}</text>
                  <text class="record-text">时长</text>
              </view>
              <view class="item">
                  <image class="record-img" src="/static/img/runningResult/running-step.png">
                  <text class="record-count">{{avg}}</text>
                  <text class="record-text">平均步频/分钟</text>
              </view>
      </view>
      <view class="running-record-bottom" v-if="runningInfo.page !== 'show'" @click="appealClick">
        <image class="query-img" src="~@/static/img/runningResult/running-query.png" />
        <text class="hint" v-if="appealState === null">我要申诉</text>
        <text class="hint" v-if="appealState === 0">已申诉，查看进度</text>
        <text class="hint" v-if="appealState === 1">申诉成功，查看详情</text>
        <text class="hint" v-if="appealState === 2">申诉失败，查看详情</text>
      </view>
    </view>
    <view class="running-info">
      <view class="running-info-top">
        <view class="top-left">
          <image class="type-img" src="/static/img/runningResult/range-running.png" />
          <text class="type-text">{{type}}</text>
        </view>
        <image class="avatar-img" :src="avatar" />
      </view>
      <view class="real-name-box">
        <text class="real-name">{{userInfo.realName}}</text>
      </view>
      <view class="running-info-center">
        <view class="center-right">
          <text class="running-info-count">{{ gpsMileage || 0}}</text>
          <text class="running-info-km">(km)</text>
        </view>
        <view class="center-left">
          <view class="left-top">
             <text class="energy-count" v-if="data && data.detailsRoutineVO">{{data.detailsRoutineVO.calorie || 0}}</text>
             <text class="energy-text">能量消耗/kcal</text>
          </view>
          <view class="left-bottom">
             <text class="running-time">{{time}}</text>
          </view>
        </view>
      </view>
      <view class="running-info-bottom">
        <view class="reason" :style="data && data.uneffectiveReason?{}:{visibility:'hidden'}"  @click="checkReason(data.uneffectiveReason)">
          <image class="hint-img" src="~@/static/img/runningResult/running-hint.png" />
          <text class="hint-text">查看原因</text>
        </view>
        <view class="number" v-if="data">
          <view><text class="number-text">{{data.scoryType===1?'本次计入有效里程':'本次计入有效段数'}}</text></view>
          <view>
          
            <!-- 里程模式 -->
            <text class="number-count" v-if="data.scoryType===1">{{data.operationMileage === null? data.effectiveMileage: data.operationMileage}}</text>
            <!-- 段数模式 -->
            <text class="number-count" v-if="data.scoryType===2">{{data.operationPart === null ? data.effectivePart : data.operationPart}}</text>
          </view>
          <view><text class="number-unit">{{data.scoryType===1?'km':'(段)'}}</text></view>
        </view>
      </view>
    </view>
    </map>
  </view>
</template>
<script>

import { getUserInfo } from '@/utils/common';
import { running } from '@/request/api/student';

export default {
data() {
  return {
    backNum: 0, // 控制返回按钮只触发一次
    showMap: true,
    id: 0, // 使用 marker点击事件 需要填写id
    title: 'map',
    screenHeight: 0,
    StatusBar: 0,
    latitude: 0,
    longitude: 0,
    avatarArr:['/static/img/avatar/student-man-avatar.png','/static/img/avatar/student-woman-avatar.png','/static/img/avatar/teacher-man-avatar.png','/static/img/avatar/teacher-woman-avatar.png'],
    runningInfo:{},
    paceNumber:0, //步数
    paceRange:0, //步幅度,
    type:'',//类型
    endTime: '', // 时间
    data:null,  // 跑步总数据
    appealState: null // 申诉状态
  };
},
computed:{
  userInfo(){
    return getUserInfo()
  },
  calorie() {
    if (this.data&&this.data.detailsRoutineVO) {
      return this.data.detailsRoutineVO.calorie
    }
    return 0
  },
  avatar() {
    if (this.userInfo) {
      const { identity, gender } = this.userInfo;
      if (identity === 'STUDENT') {
        return this.avatarArr[gender-1];
      }
      if (identity === 'TEACHER') {
        if (gender === 1) {
          return this.avatarArr[2];
        }
        if (gender === 2) {
          return this.avatarArr[3];
        }
      }
    }
    return undefined;
  },
  time(){
    if(this.endTime){ 
       //return this.$u.timeFormat(Number(this.endTime), 'yyyy mm dd hh:MM')
      const date = new Date(Number(this.endTime));
      let year = date.getFullYear();
      let M = date.getMonth() + 1;
      let d = date.getDate();
      let t = `${date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()}:${date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()}`;
      return `${year}年${M}月${d}日 ${t}`
    }
  },
  covers(){
    if(this.data){
      const data = [
        {
          points: this.data.detailsRoutineVO.routineLine,
          color: '#FC6C37FF', //线的颜色
          width: 5 //线的宽度
        }
      ];
      return data;
    }
    return [];
  },
  markers(){
    if(this.data&&this.data.detailsRoutineVO){
      const markers= (this.data.detailsRoutineVO.signPoint || []).map((item,index)=>{
        return {
        id: index,   //id 必填项
        width: 19,
        height: 24,
        longitude: item.longitude,
        latitude: item.latitude,
        iconPath: `/static/img/runningResult/point.png`  //重点在路径这里
      }
      })
      return [...markers]
    }
    return [];
  },
  polygons(){
    if(this.data && this.data.detailsRoutineVO && this.data.detailsRoutineVO.effictiveRegion){
      return [
        this.runningInfo.plat=== '1'?
      {
        points: this.data.detailsRoutineVO.effictiveRegion[0],
        strokeColor: '#3C55CBFF', //描边的颜色
        fillColor:'#4B6AFF4D',
        strokeWidth: 3, //线的宽度
      }:
      {
        points: this.data.detailsRoutineVO.effictiveRegion[0],
        strokeColor: '#3C55CBFF', //描边的颜色
        strokeWidth: 3, //线的宽度
      }
      ]
    }
    return [];
  },
  keepTime(){
    if(this.data && this.data.keepTime){
      let m = parseInt(this.data.keepTime / 60);
      let s = this.data.keepTime % 60;
      s = s <10?`0${s}`:`${s}`
      if(m<60){
        m = m <10?`0${m}`:`${m}`
        return `00:${m}:${s}`
      }else{
        let h =parseInt(m / 60);
        m = m % 60;
        m = m <10?`0${m}`:`${m}`;
        h = h <10?`0${h}`:`${h}`;
        return `${h}:${m}:${s}`
      }
    }
    return ''
  },
  avg(){
    if(this.data && this.data.detailsRoutineVO&&this.data.keepTime){
      return (this.data.detailsRoutineVO.paceNumber/(this.data.keepTime/60)).toFixed(2)
    }
    return 0
  },
  gpsMileage(){
    if(this.data && this.data.detailsRoutineVO){
      return Math.round(this.data.detailsRoutineVO.gpsMileage * 100) / 100;
    }
    return 0
  },
  avePace(){
    if(this.data && this.data.detailsRoutineVO){
      let m = parseInt((this.data.detailsRoutineVO.avePace % (1000 * 60 * 60)) / (1000 * 60));
      let s = parseInt((this.data.detailsRoutineVO.avePace % (1000 * 60)) / 1000);
      s = s <10?`0${s}`:`${s}`
      return `${m}'${s}''`
    }
    return 0
  }
},
mounted() {
  uni.$on('popup-ok', () => {
    const subNVue = uni.getSubNVueById('popup');
    subNVue.hide('fade-out', 300);
  });
},
methods: {
  checkReason(content, showTitle = true){
    //打开弹窗
    uni.$emit('popup-on', {
      content,
      showTitle
    });
    const subNVue = uni.getSubNVueById('popup');
    subNVue.show('fade-in', 300);
  },
  back() {
    const _this = this
    if (this.backNum === 0) {
      uni.navigateBack({
        // 失败需要重新重置返回
        fail: () => {
          setTimeout(()=> {
            _this.backNum === 0
          }, 500)
        }
      });
    }
    this.backNum += 1;
  },
  async getRunningDetailsRoutine(){
    const { id, type } = this.runningInfo;
    const { code, data } = await running.getRunningDetailsRoutine({
      id,
      type,
      userId: getUserInfo().id
    });
    if (code === 0) {
      const routineLine = data.detailsRoutineVO.routineLine || [];
      console.log('routineLine:', data)
      this.data = data;
      this.endTime = data.endTime;
      if (routineLine) {
        // 跑步路径
        this.type = data.detailsRoutineVO.type || '';
        this.latitude = routineLine[0].latitude;
        this.longitude = routineLine[0].longitude;
      }
    }
  },
  async getAppealStatus () {
  // 获取当前申诉状态
  const { id, type } = this.runningInfo;
    const { code, data } = await running.getAppealStatus({
      runningDetailsId: id,
      semesterId: this.$store.state.semester.currentSemester.id
    });
    if (code === 0) {
      this.appealState = data;
    }
  },
  async appealClick () {
    // appealState 判断当前状态，未申诉跳转申诉，已申诉去申诉详情 null 未申诉， 1 成功， 2失败
    const state = this.appealState === null;
    let url = `/pages/runningAppeal/${state ? 'add' : 'detail'}`;
    url += `?id=${state ? this.runningInfo.id : this.data.appealId}&page=detail`;
    if (state) {
      // 需要验证创建申诉极限，达到上限不能创建申诉
      const { code, data } =await running.getLimit({
        semesterId: this.$store.state.semester.currentSemester.id
      });
      if (code === 0) {
        if (data) {
          uni.navigateTo({ url })
        } else {
          this.checkReason('申诉已达上限,请稍后再试', false)
        }
      }
    } else {
      uni.navigateTo({ url })
    }
  }
},
onShow() {
  this.showMap = true;
  if (this.runningInfo.page !== 'show') {
    this.getAppealStatus();
  }
  this.getRunningDetailsRoutine();
},
onLoad(option) {
  this.runningInfo= option;
  this.getRunningDetailsRoutine();
  const _this = this;
  uni.getSystemInfo({
    success(e) {
      _this.screenHeight = e.screenHeight;
      _this.StatusBar = e.statusBarHeight;
    }
  });
  if (option.page === 'native') {
    this.showMap = false;
    // 原生跳转，直接跳转
    const state = (option.appealState === null || option.appealState === 'null');
    let url = `/pages/runningAppeal/${state ? 'add' : 'detail'}`;
    url += `?id=${state ? option.id : option.appealId}&page=detail`; 
    setTimeout(()=> {
      uni.navigateTo({ url })
    }, 500)
  }
}
};
</script>
<style scoped>
.running-result {
position:relative;
width: 750rpx;
}
.running-map {
width: 750rpx;
}
.nav-bar {
position:absolute;
width: 48rpx;
height: 48rpx;
left: 32rpx;
}
.nav-title {
position:absolute;
width: 160rpx;
height: 56rpx;
left: 375rpx;
margin-left: -80rpx;
line-height: 56rpx;
}
.nav-title-text{
width:200rpx;
font-size: 40rpx;
font-weight: bold;
}
.running-record {
position:absolute;
bottom: 68rpx;
left: 40rpx;
width: 670rpx;
background: rgba(255, 255, 255, 1);
box-shadow: -6rpx 4rpx 36rpx 8rpx rgba(85, 81, 112, 0.14);
border-radius: 24rpx;
}
.record-img{
  width: 44rpx;
  height: 44rpx;
}
.running-record-top{
flex-direction: row;
justify-content:space-between;
  padding-top: 28rpx;
  padding-left: 32rpx;
  padding-right: 32rpx;
}
.item{
flex:1;
  align-items: center;
}
.record-text{
  font-weight:500;
color:rgba(23,43,76,1);
font-size:24rpx;
}
.record-count{
  font-size:36rpx;
font-family:Oswald-Bold,Oswald;
font-weight:bold;
color:rgba(23,43,76,1);
margin-top: 16rpx;
margin-bottom: 16rpx;
}
.running-record-bottom{
 flex-direction: row;
  align-items:center;
  justify-content:center;
  margin-top: 70rpx;
}
.hint{
font-weight:400;
color:rgba(87,107,149,1);
font-size:24rpx;
}
.query-img{
  width: 36rpx;
  height: 36rpx;
  margin-right: 8rpx;
}
.running-info{
position:absolute;
bottom: 430rpx;
left: 40rpx;
width:670rpx;
height:370rpx;
padding-right:32rpx;
padding-left:32rpx;
background:rgba(255,255,255,1);
box-shadow:-6rpx 4rpx 36rpx 8rpx rgba(85,81,112,0.14);
border-radius:24rpx;
}
.running-info-top{
flex-direction: row;
margin-top:18rpx;
margin-bottom:12rpx;
align-items:center;
justify-content:space-between;
}
.top-left{
flex-direction: row;
align-items:center;
}
.type-img{
width:44rpx;
height:44rpx;
}
.type-text{
font-size:32rpx;
font-weight:500;
color:rgba(56,54,77,1);
}
.avatar-img{
width:64rpx;
height:64rpx;
}
.real-name-box{
flex-direction: row;
justify-content:flex-end;
margin-bottom:24rpx;
}
.real-name{
font-size:28rpx;
color:rgba(56,54,77,1);
}
.running-info-center{
width:606rpx;
padding-bottom:16rpx;
border-bottom-style:solid;
border-bottom-width:2rpx;
border-bottom-color:#F0F0F0;
}
.running-info-center{
flex-direction: row;
justify-content:space-between;
}
.center-right{
flex-direction: row;
}
.running-info-count{
font-size:80rpx;
font-weight:bold;
color:rgba(23,43,76,1);
line-height:100rpx;
}
.running-info-km{
font-size:24rpx;
color:rgba(23,43,76,1);
margin-left:10rpx;
margin-top:50rpx;
}
.left-top{
flex-direction: row;
justify-content:flex-end;
align-items:center;
margin-bottom:14rpx;
}
.energy-count{
font-size:36rpx;
font-weight:bold;
color:rgba(23,43,76,1);
margin-right:20rpx;
line-height:52rpx;
}
.energy-text{
font-size:24rpx;
font-weight:500;
color:rgba(23,43,76,1);
}
.left-bottom{
flex-direction: row;
justify-content:flex-end;
}
.running-date{
font-size:24rpx;
font-weight:400;
color:rgba(139,138,153,1);
}
.running-time{
font-size:24rpx;
font-weight:400;
color:rgba(139,138,153,1);
margin-left:20rpx;
}
.running-info-bottom{
height:100rpx;
flex-direction: row;
align-items:center;
justify-content:space-between;
}
.reason{
width:162rpx;
height:44rpx;
background-color:rgba(246,98,103,0.18);
border-radius:6rpx;
flex-direction: row;
align-items:center;
justify-content:center;
}
.hint-img{
width:34rpx;
height:36rpx;
margin-right:8rpx;
}
.hint-text{
font-size:24rpx;
font-weight:400;
color:rgba(246,98,103,1);
}
.number{
flex-direction: row;
justify-content:space-between;
align-items:flex-end;
}
.number-text{
font-size:28rpx;
font-weight:600;
color:rgba(23,43,76,1);
}
.number-count{
font-size:44rpx;
font-weight:bold;
color:rgba(74,186,93,1);
margin-left:16rpx;
margin-right:16rpx;
line-height:48rpx;
}
.number-unit{
font-size:24rpx;
font-weight:400;
color:rgba(23,43,76,1);
}
</style>
